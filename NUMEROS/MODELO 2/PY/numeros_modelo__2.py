# -*- coding: utf-8 -*-
"""Numeros-Modelo _2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPhg4DaegsSyhi6u7IF08MYFQXO4dI3o
"""

import tensorflow as tf
import tensorflow_datasets as tfds

#Descargar set de datos
datos, metadatos = tfds.load('mnist', as_supervised= True, with_info=True)

#Obtener en variables separadas los datos de entrenamiento y test

datos_entrenamiento, datos_test= datos['train'], datos['test']

# Funcion de normalizacion ppara dt

def normalizar(imagenes, etiquetas):
  imagenes=tf.cast(imagenes,tf.float32)
  imagenes /= 255
  return imagenes,etiquetas

#Normalizar los datos de entrenamiento
datos_entrenamiento  = datos_entrenamiento.map(normalizar)
datos_test = datos_test.map(normalizar)

clases = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
import matplotlib.pyplot as plt

plt.figure(figsize=(10,10))

for i, (imagen, etiqueta) in enumerate(datos_entrenamiento.take(25)):
  imagen = imagen.numpy().reshape((28,28))
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(imagen, cmap=plt.cm.binary)
  plt.xlabel(clases[etiqueta])

plt.show()

#Crear modelo regular

modelo=tf.keras.Sequential([


    tf.keras.layers.Conv2D(32,(3,3), input_shape=(28,28,1), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64,(3,3), input_shape=(28,28,1), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(units=100,activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

#Compilar el modelo
modelo.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

#Los numeros de datos de entrenamiento y pruebas (60k y 10k)
num_datos_entrenamiento = metadatos.splits["train"].num_examples
num_datos_test = metadatos.splits["test"].num_examples

#Trabajar por lotes
TAMANO_LOTE=32

#Shuffle y repeat hacen que los datos esten mezclados de manera aleatoria
#para que el entrenamiento no se aprenda las cosas en orden
datos_entrenamiento = datos_entrenamiento.repeat().shuffle(num_datos_entrenamiento).batch(TAMANO_LOTE)
datos_pruebas = datos_test.batch(TAMANO_LOTE)

import math

historial = modelo.fit(
    datos_entrenamiento,
    epochs=60,
    steps_per_epoch=math.ceil(num_datos_entrenamiento/TAMANO_LOTE)
)

#Exportar el modelo al explorador! (Mas detalle de esto en en mi video de exportacion: https://youtu.be/JpE4bYyRADI )
modelo.save('numeros_regular.h5')

#Convertirlo a tensorflow.js
!pip install tensorflowjs

!mkdir carpeta_salida

!tensorflowjs_converter --input_format keras numeros_regular.h5 carpeta_salida